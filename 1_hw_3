#include <SFML/Window.hpp>
#include <SFML/Graphics.hpp>
 
class Draggable {
protected:
    sf::RectangleShape mShape;
    bool mIsDragged = false;
    sf::Vector2f mOffset;
    sf::RenderWindow& mWindow;
 
public:
    Draggable(sf::RenderWindow& window, sf::Vector2f position, sf::Vector2f size, sf::Color color)
        : mWindow(window) {
        mShape.setPosition(position);
        mShape.setSize(size);
        mShape.setFillColor(color);
    }
 
    virtual bool onMousePressed(sf::Vector2f mousePosition) {
        if (mShape.getGlobalBounds().contains(mousePosition)) {
            mIsDragged = true;
            mOffset = mousePosition - mShape.getPosition();
        }
        return mIsDragged;
    }
 
    virtual void onMouseReleased() {
        mIsDragged = false;
    }
 
    virtual void onMouseMoved(sf::Vector2f mousePosition) {
        if (mIsDragged) {
            mShape.setPosition(mousePosition - mOffset);
        }
    }
 
    void setColor(sf::Color color) {
        mShape.setFillColor(color);
    }
 
    void handleEvents(const sf::Event& event) {
        if (event.type == sf::Event::MouseButtonPressed && event.mouseButton.button == sf::Mouse::Left) {
            sf::Vector2f mousePosition = mWindow.mapPixelToCoords({event.mouseButton.x, event.mouseButton.y});
            onMousePressed(mousePosition);
        }
        else if (event.type == sf::Event::MouseButtonReleased && event.mouseButton.button == sf::Mouse::Left) {
            onMouseReleased();
        }
        else if (event.type == sf::Event::MouseMoved) {
            sf::Vector2f mousePosition = mWindow.mapPixelToCoords({event.mouseMove.x, event.mouseMove.y});
            onMouseMoved(mousePosition);
        }
    }
 
    void draw() const {
        mWindow.draw(mShape);
    }
};
 
class DraggableWithColorChange : public Draggable {
private:
    sf::Color mBaseColor;
    sf::Color mDragColor;
 
public:
    DraggableWithColorChange(sf::RenderWindow& window, 
                             sf::Vector2f position, 
                             sf::Vector2f size, 
                             sf::Color baseColor, 
                             sf::Color dragColor)
        : Draggable(window, position, size, baseColor),
          mBaseColor(baseColor),
          mDragColor(dragColor) {}
 
    bool onMousePressed(sf::Vector2f mousePosition) override {
        bool result = Draggable::onMousePressed(mousePosition);
        if (result) {
            setColor(mDragColor);
        }
        return result;
    }
 
    void onMouseReleased() override {
        Draggable::onMouseReleased();
        setColor(mBaseColor);
    }
};
 
int main() {
    sf::RenderWindow window(sf::VideoMode(800, 600), "Draggable with Color");
    window.setFramerateLimit(60);
 
    DraggableWithColorChange draggable(
        window,
        {100, 100}, 
        {200, 400}, 
        sf::Color::Blue, 
        sf::Color::Red
    );
 
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
            draggable.handleEvents(event);
        }
 
        window.clear(sf::Color::Black);
        draggable.draw();
        window.display();
    }
 
    return 0;
}
